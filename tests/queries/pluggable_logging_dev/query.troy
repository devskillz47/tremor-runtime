#
define flow logging_flow_named_positional_formatting
flow
	use tremor::pipelines;
	use tremor::connectors;
	define connector read_file from file
	args
		file = "in"
	with
		codec = {"name": "json", "config": {"mode": "sorted"}},
		preprocessors = ["separate"],
		config = {
				"path": args.file,
				"mode": "read"
		},
	end;
	define connector write_file from file
	args
		file = "out"
	with
		codec = {"name": "json", "config": {"mode": "sorted"}},
		postprocessors = ["separate"],
		config = {
				"path": args.file,
				"mode": "truncate"
		},
	end;

	define pipeline logging_pipeline
	pipeline
		use tremor::logging;
		select match event of
			case %{absent level} => "exit"
			case %{absent  msg } => "exit"
			case %{absent data } => # All these cases should only fail if msg await for formatting
				match event of
					case %{level == "DEBUG"} => logging::debug(event.msg)
					case %{level == "ERROR"} => logging::error(event.msg)
					case %{level == "INFO" } => logging::info (event.msg)
					case %{level == "TRACE"} => logging::trace(event.msg)
					case %{level == "WARN" } => logging::warn (event.msg)
					case _ => "exit"
				end
			case _               => # All formatting cases
				match event of
					case %{level == "DEBUG"} => logging::debug(event.msg, event.data)
					case %{level == "ERROR"} => logging::error(event.msg, event.data)
					case %{level == "INFO" } => logging::info (event.msg, event.data)
					case %{level == "TRACE"} => logging::trace(event.msg, event.data)
					case %{level == "WARN" } => logging::warn (event.msg, event.data)
					case _ => "exit"
				end
		end
		from in into out;
	end;

	# Create read/write file connectors
	create connector reader from read_file;
	create connector writer from write_file;

	# Create read/write exit connectors
	create connector exit from connectors::exit;

	# Create pipelines
	create pipeline logging_pipeline;

	# Connections
	connect /connector/reader to /pipeline/logging_pipeline;
	connect /pipeline/logging_pipeline to /connector/writer;
	connect /pipeline/logging_pipeline to /connector/exit;
end;

deploy flow logging_flow_named_positional_formatting;

